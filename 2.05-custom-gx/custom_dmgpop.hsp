// Ports oom's damage popups.

#define MAX_DAMAGE_POPUPS 400

#define DefineDmgConCol(%1,%2) locvar_colorres_i = %2%c\
    colorres%c\
    DmgPopupColorsCondition(0, %1) = 255, 255, 255, ginfo(16), ginfo(17), ginfo(18)

*DamagePopupsInit
    dim DmgPopups, 16, MAX_DAMAGE_POPUPS
    sdim DmgPopupTexts, 20, MAX_DAMAGE_POPUPS
    dim DmgPopupColors, 6, MAX_DAMAGE_POPUP_KINDS
    dim DmgPopupColorsResist, 6, MAX_SKILL_RESIST - STARTING_SKILL_RESIST
    dim DmgPopupColorsCondition, 6, MAX_CONDITION
    DmgPopupNext = 0

	DmgPopupColors(0, DMGPOPUP_ADD_HEX)             = 255, 255, 255, 150, 0,   0
	DmgPopupColors(0, DMGPOPUP_ADD_BUFF)            = 255, 255, 255, 0,   150, 150
	DmgPopupColors(0, DMGPOPUP_REMOVE_HEX)          = 255, 255, 255, 0,   150, 0
	DmgPopupColors(0, DMGPOPUP_REMOVE_BUFF)         = 255, 255, 255, 150, 150, 150
	DmgPopupColors(0, DMGPOPUP_MISS)                = 255, 255, 255, 0,   0,   0
	DmgPopupColors(0, DMGPOPUP_EVADE)               = 255, 255, 255, 0,   0,   0
	DmgPopupColors(0, DMGPOPUP_NORMAL_DAMAGE)       = 255, 255, 255, 0,   0,   0
	DmgPopupColors(0, DMGPOPUP_ELEM_DAMAGE)         = 255, 255, 255, 0,   0,   0
	DmgPopupColors(0, DMGPOPUP_HEAL)                = 0,   255, 0,   0,   0,   0
	DmgPopupColors(0, DMGPOPUP_HEAL_MP)             = 0,   128, 255, 0,   0,   0
	DmgPopupColors(0, DMGPOPUP_HEAL_SP)             = 255, 255, 0,   0,   0,   0
	DmgPopupColors(0, DMGPOPUP_ADD_CONDITION)       = 255, 255, 255, 0,   0,   0
	DmgPopupColors(0, DMGPOPUP_REMOVE_CONDITION)    = 0,   255, 0,   0,   0,   0

    repeat MAX_SKILL_RESIST - STARTING_SKILL_RESIST
        locvar_colorres_i = cnt + STARTING_SKILL_RESIST
        colorres
        DmgPopupColorsResist(0, cnt) = 255, 255, 255, ginfo(16), ginfo(17), ginfo(18)
    loop

	DefineDmgConCol CONDITION_POISON, SKILL_RES_POISON
	DefineDmgConCol CONDITION_SLEEP, SKILL_RES_NERVE
	DefineDmgConCol CONDITION_PARALYZE, SKILL_RES_NERVE
	DefineDmgConCol CONDITION_BLIND, SKILL_RES_DARKNESS
	DefineDmgConCol CONDITION_CONFUSE, SKILL_RES_MIND
	DefineDmgConCol CONDITION_FEAR, SKILL_RES_MIND
	DefineDmgConCol CONDITION_DIM, SKILL_RES_SOUND
	DefineDmgConCol CONDITION_DRUNK, 0
	DefineDmgConCol CONDITION_BLEED, 0
	DefineDmgConCol CONDITION_WET, 0
	DefineDmgConCol CONDITION_INSANE, 0
	DefineDmgConCol CONDITION_SICK, 0
	DefineDmgConCol CONDITION_OIL, 0
	DefineDmgConCol CONDITION_INVERT, 0
	DefineDmgConCol CONDITION_MPOISON, 0
	DefineDmgConCol CONDITION_WINCE, SKILL_RES_FIRE
	DefineDmgConCol CONDITION_CHILLS, SKILL_RES_COLD

    return

#deffunc DamagePopupAdd str prm_text, int prm_cc, int prm_type, int prm_extra
    if ( cfg_dmgpopups == FALSE ) {
        return
    }

    if ( prm_type < DMGPOPUP_NONE | prm_type >= MAX_DAMAGE_POPUP_KINDS ) {
        return
    }

    if ( cfg_dmgpopup_buffhex == FALSE ) {
        if ( prm_type == DMGPOPUP_ADD_HEX | prm_type == DMGPOPUP_ADD_BUFF | prm_type == DMGPOPUP_REMOVE_HEX | prm_type == DMGPOPUP_REMOVE_BUFF ) {
            return
        }
    }
    if ( cfg_dmgpopup_con == FALSE ) {
        if ( prm_type == DMGPOPUP_ADD_CONDITION | prm_type == DMGPOPUP_REMOVE_CONDITION ) {
            return
        }
    }
    if ( cfg_dmgpopup_evade == FALSE ) {
        if ( prm_type == DMGPOPUP_MISS | prm_type == DMGPOPUP_EVADE ) {
            return
        }
    }
    if ( cfg_dmgpopup_chat == FALSE ) {
        if ( prm_extra == 9999 ) {
            return
        }
    }

    DmgPopupTexts(DmgPopupNext) = prm_text
    DmgPopups(0, DmgPopupNext) = timeGetTime(), prm_cc, 255, 255, 255, 0, 0, 0

    if ( prm_type == DMGPOPUP_ELEM_DAMAGE & prm_extra >= STARTING_SKILL_RESIST & prm_extra < MAX_SKILL_RESIST ) {
        res@DP = prm_extra - STARTING_SKILL_RESIST
        DmgPopups(2, DmgPopupNext) = DmgPopupColorsResist(0, res@DP)
        DmgPopups(3, DmgPopupNext) = DmgPopupColorsResist(1, res@DP)
        DmgPopups(4, DmgPopupNext) = DmgPopupColorsResist(2, res@DP)
        DmgPopups(5, DmgPopupNext) = DmgPopupColorsResist(3, res@DP)
        DmgPopups(6, DmgPopupNext) = DmgPopupColorsResist(4, res@DP)
        DmgPopups(7, DmgPopupNext) = DmgPopupColorsResist(5, res@DP)
    }
    else {
        if ( prm_type == DMGPOPUP_ADD_CONDITION & prm_extra >= 0 & prm_extra < MAX_CONDITION ) {
            DmgPopups(2, DmgPopupNext) = DmgPopupColorsCondition(0, prm_extra)
            DmgPopups(3, DmgPopupNext) = DmgPopupColorsCondition(1, prm_extra)
            DmgPopups(4, DmgPopupNext) = DmgPopupColorsCondition(2, prm_extra)
            DmgPopups(5, DmgPopupNext) = DmgPopupColorsCondition(3, prm_extra)
            DmgPopups(6, DmgPopupNext) = DmgPopupColorsCondition(4, prm_extra)
            DmgPopups(7, DmgPopupNext) = DmgPopupColorsCondition(5, prm_extra)
        }
        else {
            DmgPopups(2, DmgPopupNext) = DmgPopupColors(0, prm_type)
            DmgPopups(3, DmgPopupNext) = DmgPopupColors(1, prm_type)
            DmgPopups(4, DmgPopupNext) = DmgPopupColors(2, prm_type)
            DmgPopups(5, DmgPopupNext) = DmgPopupColors(3, prm_type)
            DmgPopups(6, DmgPopupNext) = DmgPopupColors(4, prm_type)
            DmgPopups(7, DmgPopupNext) = DmgPopupColors(5, prm_type)
        }
    }

    DmgPopups(8, DmgPopupNext) = prm_extra
    DmgPopups(9, DmgPopupNext) = prm_type
    if (prm_extra == 9999) {
        DmgPopups(0, DmgPopupNext) += 1500
    }

    DmgPopupNext = (DmgPopupNext + 1) \ length2(DmgPopups)

    return

*DamagePopupsDraw
    if ( cdata(CDATA_CONDITION_BLIND, CHARA_PLAYER) != 0 ) {
        return
    }

    t@DP = timeGetTime()
    font lang(cfg_font1, cfg_font2), 2 + cfg_dmgfont - en * 2, 0
    repeat length2(DmgPopups)
        i@DP = (DmgPopupNext + cnt) \ length2(DmgPopups)
        j@DP = cnt + 1

        dt@DP = DmgPopups(0, i@DP)
        cc@DP = DmgPopups(1, i@DP)

        if ( gdata(GDATA_AREA) != AREA_PET_ARENA ) {
            if ( fov_los(cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), cdata(CDATA_X, cc@DP), cdata(CDATA_Y, cc@DP)) == 0 ) {
                continue
            }
            if ( dist(cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), cdata(CDATA_X, cc@DP), cdata(CDATA_Y, cc@DP)) > MAX_FOV / 2 ) {
                continue
            }
        }
        if (dt@DP + cfg_dmgspeed * 150 > t@DP) {
            popupY@DP = 0
            repeat length2(DmgPopups) - j@DP
                otheri@DP = (i@DP + cnt) \ length2(DmgPopups)
                if (DmgPopups(0, otheri@DP) + cfg_dmgspeed * 150 > t@DP & otheri@DP != i@DP) {
                    if (cdata(CDATA_X, cc@DP) == cdata(CDATA_X, DmgPopups(1, otheri@DP)) & cdata(CDATA_Y, cc@DP) == cdata(CDATA_Y, DmgPopups(1, otheri@DP)) ) {
                        if (DmgPopups(8, i@DP) == 9999 & DmgPopups(8, otheri@DP) != 9999) { continue }
                        popupY@DP++
                    }
                }
            loop

            s = DmgPopupTexts(i@DP)

            DmgPopFontInc = 0
            if ( DmgPopups(8, i@DP) != 9999 & ( DmgPopups(9, i@DP) == DMGPOPUP_NORMAL_DAMAGE | DmgPopups(9, i@DP) == DMGPOPUP_ELEM_DAMAGE ) ) {
                if ( (t@DP - dt@DP) / (cfg_dmgspeed * 5 + 1) + popupY@DP * (2 + cfg_dmgfont + 3) < 16) {
                    DmgPopFontInc = 16 - ((t@DP - dt@DP) / (cfg_dmgspeed * 5 + 1) - popupY@DP * (2 + cfg_dmgfont + 3))
                }
            }

            DmgPopupX = (cdata(CDATA_X, cc@DP) - scx) * inf_tiles + inf_screenx - strlen(s) * (2 + cfg_dmgfont + 1 + DmgPopFontInc) / 2 / 2 + inf_tiles / 2
            DmgPopupY = (cdata(CDATA_Y, cc@DP) - scy) * inf_tiles + inf_screeny - popupY@DP * (2 + cfg_dmgfont + 3 + DmgPopFontInc) - (t@DP - dt@DP) / (cfg_dmgspeed * 5 + 1)
            if (DmgPopups(8, i@DP) == 9999) {
                DmgPopupY = (cdata(CDATA_Y, cc@DP) - scy) * inf_tiles + inf_screeny - popupY@DP * (2 + cfg_dmgfont + 3) - 24
            }
            DmgPopupX += (scx != scxbk) * sxfix
            DmgPopupY += (scy != scybk) * syfix
            // if (DmgPopupY < 0 | DmgPopupY + (2 + cfg_dmgfont + 3) > inf_ver | DmgPopupX < 0 | DmgPopupX + strlen(s) * (2 + cfg_dmgfont + DmgPopFontInc + 1) > windoww) {
            //     continue
            // }
            font lang(cfg_font1, cfg_font2), 13 - en * 2 + DmgPopFontInc, 0
            pos DmgPopupX, DmgPopupY
            color DmgPopups(5, i@DP), DmgPopups(6, i@DP), DmgPopups(7, i@DP)
            bmes s, DmgPopups(2, i@DP), DmgPopups(3, i@DP), DmgPopups(4, i@DP)
            color 0, 0, 0
        }
    loop
    font lang(cfg_font1, cfg_font2), 13 - en * 2, 0

    return
